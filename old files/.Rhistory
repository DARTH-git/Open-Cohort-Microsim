# Costs inputs
c.H <- 1500           # cost of one cycle in healthy state
c.HB <- 8000          # cost of one cycle in healthy with baby state
c.S <- 5000           # cost of one cycle in sick state
c.D <- 0
# utility inputs
u.H     <- 1               # utility when healthy
u.HB    <- 0.98            # utility when healthy with baby
u.S     <- 0.85            # utility when sick
u.D     <- 0               # utility when dead
#### 03.1 Construct functions ####
#### 03.1.1 Probability functions ####
# Probs function outputs transition probabilities for next cycle
Probs <- function(M_it) {
# M_it:    current health state
p.it <- vector("numeric", length(v.n))     # intiatilize vector of state transition probabilities
# update p.it with the appropriate probabilities
p.it[M_it == "healthy"] <- c(1 - p.HD - p.HS - p.HHB, p.HHB, p.HS, p.HD)     # transition probabilities when healthy
p.it[M_it == "healthy with baby"] <- c(1 - p.HBS - p.HBD, 0, p.HBS, p.HBD)   # transition probabilities when healthy with baby
p.it[M_it == "sick"]    <- c(0, 0, 1 - p.SD, p.SD)               # transition probabilities when sick
p.it[M_it == "dead"]    <- c(0, 0, 0, 1)                         # transition probabilities when dead
return(p.it)  # return transition probability
}
#### 03.1.2 Cost functions ####
# Costs function calculates the cost accrued by an individual this cycle
Costs <- function (M_it) {
# M_it: current health state
c.it <- c()
c.it[M_it == "dead"]    <- c.D     # costs at dead state
c.it[M_it == "healthy"] <- c.H     # costs accrued by being healthy this cycle
c.it[M_it == "healthy with baby"] <- c.HB     # costs accrued by being healthy with baby this cycle
c.it[M_it == "sick"]    <- c.S     # costs accrued by being sick this cycle
return(c.it)  # return costs accrued this cycle
}
#### 03.1.2 Effectiveness functions ####
# Effs function outputs QALYs accrued by an individual for this cycle
Effs <- function (M_it) {
# M_it: current health state
q.it <- c()
q.it[M_it == "dead"]    <- u.D        # QALYs at dead state
q.it[M_it == "healthy"] <- u.H        # QALYs accrued by being healthy this cycle
q.it[M_it == "healthy with baby"] <- u.HB      # # QALYs accrued by being healthy with baby this cycle
q.it[M_it == "sick"]    <- u.S        # QALYs accrued by being sick this cycle
return(q.it)  # return the QALYs accrued this cycle
}
#### 03.1.3 Initiate the matrices ####
# m.M: health state for each patient at each cycle
# m.E: outcomes (e.g. QALYs) accrued by each patient at each cycle
# m.C: costs accrued by each individual at each cycle
m.M  <- m.E <- m.C <-
matrix(nrow = n.i, ncol = n.t + 1,
dimnames = list(paste("ind", 1:n.i, sep = " "),     # name the rows ind1, ind2, ind3, etc.
paste("cycle", 0:n.t, sep = " ")))  # name the columns cycle0, cycle1, cycle2, cycle3, etc.
#### 04 Model process ####
p <- Sys.time() # start simulation
# individuals 1 through n.i
i <- 1
while (i <= n.i) { # open individuals loop
m.M[i, 1] <- v.M_Init[i]       # initial health state for individual i
m.C[i, 1] <- Costs(m.M[i, 1])  # costs accrued individual i during cycle 0
m.E[i, 1] <- Effs(m.M[i, 1])   # QALYs accrued individual i during cycle 0
# cycles 1 thru n.t
for (t in 1:n.t) { # open time loop
# get transition probabilities based on previous health state
v.p <- Probs(m.M[i, t])
# sample the current health state based on transition probabilities v.p
m.M[i, t + 1] <- sample(x = v.n, prob = v.p, size = 1)
# calculate costs and effects accrued by individual i for cycle t
m.C[i, t + 1] <- Costs(m.M[i, t + 1])   # costs
m.E[i, t + 1] <- Effs(m.M[i, t + 1])    # QALYs
# if individual i enters the healthy with baby state, the baby enters the model
if (m.M[i, t + 1] == "healthy with baby") {
m.M <- rbind(m.M, rep(NA, ncol(m.M)))  # add the baby to the m.M matrix
m.M[nrow(m.M), t + 1] <- 'healthy'     # baby begins in the healthy state
m.C <- rbind(m.C, rep(0, ncol(m.C)))  # add the baby to the m.C matrix, previous costs assigned to 0
m.C[nrow(m.C), t + 1] <- Costs(m.M[nrow(m.C), t + 1])    # cost in the healthy state
m.E <- rbind(m.E, rep(0, ncol(m.E)))  # add the baby to the m.M matrix, previous utilities assigned to 0
m.E[nrow(m.E), t + 1] <- Effs(m.M[nrow(m.E), t + 1])     # utility in the healthy state
# add rownames
rownames(m.M)[nrow(m.M)] <- rownames(m.C)[nrow(m.C)] <- rownames(m.E)[nrow(m.E)] <-
paste("ind ", as.character(nrow(m.M)), ",", " baby", sep = "")
# increase the n.i
n.i <- n.i + 1
}
} # close time loop
# Display simulation progress
if(i/(n.i/10) == round(i/(n.i/10), 0)) { # display progress every 10%
cat('\r', paste(i/n.i * 100, "% done", sep = " "))
}
i <- i + 1
} # close individuals loop
m.M
nrow(m.M)
#### 05 Output ####
v.dw <- 1 / (1 + d.r) ^ (0:n.t) # calculate discount weight for each cycle based on discount rate d.r
tc <- m.C %*% v.dw    # total discounted cost per individual
te <- m.E %*% v.dw    # total discounted QALYs per individual
tc_avg <- mean(tc)     # average discounted cost
te_avg <- mean(te)     # average discounted QALYs
results <- data.frame("Total Cost" = tc_avg, "Total QALYs" = te_avg)
results
m.M
m.M[nrow(m.M),]
m.M[nrow(m.M)-1,]
m.M[nrow(m.M)-2,]
Probs(m.M[11447, 3])
Probs(m.M[11447, 1])
i
a <- c(NA, NA, 1, NA, NA)
min(which(!is.na(a)))
a <- 2
for (t in a:n.t) { print (t) }
a <- 50
for (t in a:n.t) { print (t) }
rm(list = ls())  # Delete everything that is in R's memory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))  #set working directory as the folder where the course material is stored
#### 01 Load packages ####
#### 02 Load Functions ####
#### 03 Input Model Parameters ####
set.seed(1987)                            # set the seed
# Model structure
v.n <- c("healthy", "healthy with baby", "sick", "dead")       # vector with state names
n.s <- length(v.n)                        # number of states
n.t <- 60                                 # number of cycles
n.i <- 10000                              # number of individuals
d.r <- 3                                  # annual discount rate
v.M_Init <- rep("healthy", times = n.i)   # initial state for all individual at the start of the model
# Transition probabilities
p.HS <- 0.05         # probability healthy -> sick
p.HHB <- 0.01        # probability healthy -> healthy with baby
p.HBS <- 0.05        # probability healthy with baby -> sick
p.HBD <- 0.02         # probability healthy with baby -> dead
p.HD <- 0.02         # probability healthy -> dead
p.SD <- 0.1          # probability    sick -> dead
# Costs inputs
c.H <- 1500           # cost of one cycle in healthy state
c.HB <- 8000          # cost of one cycle in healthy with baby state
c.S <- 5000           # cost of one cycle in sick state
c.D <- 0
# utility inputs
u.H     <- 1               # utility when healthy
u.HB    <- 0.98            # utility when healthy with baby
u.S     <- 0.85            # utility when sick
u.D     <- 0               # utility when dead
#### 03.1 Construct functions ####
#### 03.1.1 Probability functions ####
# Probs function outputs transition probabilities for next cycle
Probs <- function(M_it) {
# M_it:    current health state
p.it <- vector("numeric", length(v.n))     # intiatilize vector of state transition probabilities
# update p.it with the appropriate probabilities
p.it[M_it == "healthy"] <- c(1 - p.HD - p.HS - p.HHB, p.HHB, p.HS, p.HD)     # transition probabilities when healthy
p.it[M_it == "healthy with baby"] <- c(1 - p.HBS - p.HBD, 0, p.HBS, p.HBD)   # transition probabilities when healthy with baby
p.it[M_it == "sick"]    <- c(0, 0, 1 - p.SD, p.SD)               # transition probabilities when sick
p.it[M_it == "dead"]    <- c(0, 0, 0, 1)                         # transition probabilities when dead
return(p.it)  # return transition probability
}
#### 03.1.2 Cost functions ####
# Costs function calculates the cost accrued by an individual this cycle
Costs <- function (M_it) {
# M_it: current health state
c.it <- c()
c.it[M_it == "dead"]    <- c.D     # costs at dead state
c.it[M_it == "healthy"] <- c.H     # costs accrued by being healthy this cycle
c.it[M_it == "healthy with baby"] <- c.HB     # costs accrued by being healthy with baby this cycle
c.it[M_it == "sick"]    <- c.S     # costs accrued by being sick this cycle
return(c.it)  # return costs accrued this cycle
}
#### 03.1.2 Effectiveness functions ####
# Effs function outputs QALYs accrued by an individual for this cycle
Effs <- function (M_it) {
# M_it: current health state
q.it <- c()
q.it[M_it == "dead"]    <- u.D        # QALYs at dead state
q.it[M_it == "healthy"] <- u.H        # QALYs accrued by being healthy this cycle
q.it[M_it == "healthy with baby"] <- u.HB      # # QALYs accrued by being healthy with baby this cycle
q.it[M_it == "sick"]    <- u.S        # QALYs accrued by being sick this cycle
return(q.it)  # return the QALYs accrued this cycle
}
#### 03.1.3 Initiate the matrices ####
# m.M: health state for each patient at each cycle
# m.E: outcomes (e.g. QALYs) accrued by each patient at each cycle
# m.C: costs accrued by each individual at each cycle
m.M  <- m.E <- m.C <-
matrix(nrow = n.i, ncol = n.t + 1,
dimnames = list(paste("ind", 1:n.i, sep = " "),     # name the rows ind1, ind2, ind3, etc.
paste("cycle", 0:n.t, sep = " ")))  # name the columns cycle0, cycle1, cycle2, cycle3, etc.
#### 04 Model process ####
p <- Sys.time() # start simulation
# initial cohort size
n.i_init <- n.i
# individuals 1 through n.i
i <- 1
while (i <= n.i) { # open individuals loop
if (i > n.i_init) {
# since babies do not enter at cycle 0, we need to start their time loop at the cycle they were born in
tt <- min(which(!is.na(m.M[i, ])))
} else {
tt <- 1 # normal individuals start at cycle 0
m.M[i, 1] <- v.M_Init[i]       # initial health state for individual i
m.C[i, 1] <- Costs(m.M[i, 1])  # costs accrued individual i during cycle 0
m.E[i, 1] <- Effs(m.M[i, 1])   # QALYs accrued individual i during cycle 0
}
# cycles 1 thru n.t
for (t in tt:n.t) { # open time loop
# get transition probabilities based on previous health state
v.p <- Probs(m.M[i, t])
# sample the current health state based on transition probabilities v.p
m.M[i, t + 1] <- sample(x = v.n, prob = v.p, size = 1)
# calculate costs and effects accrued by individual i for cycle t
m.C[i, t + 1] <- Costs(m.M[i, t + 1])   # costs
m.E[i, t + 1] <- Effs(m.M[i, t + 1])    # QALYs
# if individual i enters the healthy with baby state, the baby enters the model
if (m.M[i, t + 1] == "healthy with baby") {
m.M <- rbind(m.M, rep(NA, ncol(m.M)))  # add the baby to the m.M matrix
m.M[nrow(m.M), t + 1] <- 'healthy'     # baby begins in the healthy state
m.C <- rbind(m.C, rep(0, ncol(m.C)))  # add the baby to the m.C matrix, previous costs assigned to 0
m.C[nrow(m.C), t + 1] <- Costs(m.M[nrow(m.C), t + 1])    # cost in the healthy state
m.E <- rbind(m.E, rep(0, ncol(m.E)))  # add the baby to the m.M matrix, previous utilities assigned to 0
m.E[nrow(m.E), t + 1] <- Effs(m.M[nrow(m.E), t + 1])     # utility in the healthy state
# add rownames
rownames(m.M)[nrow(m.M)] <- rownames(m.C)[nrow(m.C)] <- rownames(m.E)[nrow(m.E)] <-
paste("ind ", as.character(nrow(m.M)), ",", " baby", sep = "")
# increase the n.i
n.i <- n.i + 1
}
} # close time loop
# Display simulation progress
if(i/(n.i/10) == round(i/(n.i/10), 0)) { # display progress every 10%
cat('\r', paste(i/n.i * 100, "% done", sep = " "))
}
i <- i + 1
} # close individuals loop
comp.time = Sys.time() - p
comp.time
#### 05 Output ####
v.dw <- 1 / (1 + d.r) ^ (0:n.t) # calculate discount weight for each cycle based on discount rate d.r
tc <- m.C %*% v.dw    # total discounted cost per individual
te <- m.E %*% v.dw    # total discounted QALYs per individual
tc_avg <- mean(tc)     # average discounted cost
te_avg <- mean(te)     # average discounted QALYs
results <- data.frame("Total Cost" = tc_avg, "Total QALYs" = te_avg)
results
nrow(m.M)
nrow(m.C)
nrow(m.E)
results
tail(m.M)
tail(m.M,3)
tail(m.C, 3)
tail(m.E, 3)
# examine the babies
tail(m.M, 3)
rm(list = ls())  # Delete everything that is in R's memory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))  #set working directory as the folder where the course material is stored
#### 01 Load packages ####
#### 02 Load Functions ####
#### 03 Input Model Parameters ####
set.seed(1987)                            # set the seed
# Model structure
v.n <- c("healthy", "healthy with baby", "sick", "dead")       # vector with state names
n.s <- length(v.n)                        # number of states
n.t <- 60                                 # number of cycles
n.i <- 10000                              # number of individuals
d.r <- 3                                  # annual discount rate
v.M_Init <- rep("healthy", times = n.i)   # initial state for all individual at the start of the model
# Transition probabilities
p.HS <- 0.05         # probability healthy -> sick
p.HHB <- 0.005        # probability healthy -> healthy with baby
p.HBS <- 0.05        # probability healthy with baby -> sick
p.HBD <- 0.02         # probability healthy with baby -> dead
p.HD <- 0.02         # probability healthy -> dead
p.SD <- 0.1          # probability    sick -> dead
# Costs inputs
c.H <- 1500           # cost of one cycle in healthy state
c.HB <- 8000          # cost of one cycle in healthy with baby state
c.S <- 5000           # cost of one cycle in sick state
c.D <- 0
# utility inputs
u.H     <- 1               # utility when healthy
u.HB    <- 0.98            # utility when healthy with baby
u.S     <- 0.85            # utility when sick
u.D     <- 0               # utility when dead
#### 03.1 Construct functions ####
#### 03.1.1 Probability functions ####
# Probs function outputs transition probabilities for next cycle
Probs <- function(M_it) {
# M_it:    current health state
p.it <- vector("numeric", length(v.n))     # intiatilize vector of state transition probabilities
# update p.it with the appropriate probabilities
p.it[M_it == "healthy"] <- c(1 - p.HD - p.HS - p.HHB, p.HHB, p.HS, p.HD)     # transition probabilities when healthy
p.it[M_it == "healthy with baby"] <- c(1 - p.HBS - p.HBD, 0, p.HBS, p.HBD)   # transition probabilities when healthy with baby
p.it[M_it == "sick"]    <- c(0, 0, 1 - p.SD, p.SD)               # transition probabilities when sick
p.it[M_it == "dead"]    <- c(0, 0, 0, 1)                         # transition probabilities when dead
return(p.it)  # return transition probability
}
#### 03.1.2 Cost functions ####
# Costs function calculates the cost accrued by an individual this cycle
Costs <- function (M_it) {
# M_it: current health state
c.it <- c()
c.it[M_it == "dead"]    <- c.D     # costs at dead state
c.it[M_it == "healthy"] <- c.H     # costs accrued by being healthy this cycle
c.it[M_it == "healthy with baby"] <- c.HB     # costs accrued by being healthy with baby this cycle
c.it[M_it == "sick"]    <- c.S     # costs accrued by being sick this cycle
return(c.it)  # return costs accrued this cycle
}
#### 03.1.2 Effectiveness functions ####
# Effs function outputs QALYs accrued by an individual for this cycle
Effs <- function (M_it) {
# M_it: current health state
q.it <- c()
q.it[M_it == "dead"]    <- u.D        # QALYs at dead state
q.it[M_it == "healthy"] <- u.H        # QALYs accrued by being healthy this cycle
q.it[M_it == "healthy with baby"] <- u.HB      # # QALYs accrued by being healthy with baby this cycle
q.it[M_it == "sick"]    <- u.S        # QALYs accrued by being sick this cycle
return(q.it)  # return the QALYs accrued this cycle
}
#### 03.1.3 Initiate the matrices ####
# m.M: health state for each patient at each cycle
# m.E: outcomes (e.g. QALYs) accrued by each patient at each cycle
# m.C: costs accrued by each individual at each cycle
m.M  <- m.E <- m.C <-
matrix(nrow = n.i, ncol = n.t + 1,
dimnames = list(paste("ind", 1:n.i, sep = " "),     # name the rows ind1, ind2, ind3, etc.
paste("cycle", 0:n.t, sep = " ")))  # name the columns cycle0, cycle1, cycle2, cycle3, etc.
#### 04 Model process ####
p <- Sys.time() # start simulation
# initial cohort size
n.i_init <- n.i
# individuals 1 through n.i
i <- 1
while (i <= n.i) { # open individuals loop
if (i > n.i_init) {
# since babies do not enter at cycle 0, we need to start their time loop at the cycle they were born in
tt <- min(which(!is.na(m.M[i, ])))
} else {
tt <- 1 # normal individuals start at cycle 0
m.M[i, 1] <- v.M_Init[i]       # initial health state for individual i
m.C[i, 1] <- Costs(m.M[i, 1])  # costs accrued individual i during cycle 0
m.E[i, 1] <- Effs(m.M[i, 1])   # QALYs accrued individual i during cycle 0
}
# cycles 1 thru n.t
for (t in tt:n.t) { # open time loop
# get transition probabilities based on previous health state
v.p <- Probs(m.M[i, t])
# sample the current health state based on transition probabilities v.p
m.M[i, t + 1] <- sample(x = v.n, prob = v.p, size = 1)
# calculate costs and effects accrued by individual i for cycle t
m.C[i, t + 1] <- Costs(m.M[i, t + 1])   # costs
m.E[i, t + 1] <- Effs(m.M[i, t + 1])    # QALYs
# if individual i enters the healthy with baby state, the baby enters the model
if (m.M[i, t + 1] == "healthy with baby") {
m.M <- rbind(m.M, rep(NA, ncol(m.M)))  # add the baby to the m.M matrix
m.M[nrow(m.M), t + 1] <- 'healthy'     # baby begins in the healthy state
m.C <- rbind(m.C, rep(0, ncol(m.C)))  # add the baby to the m.C matrix, previous costs assigned to 0
m.C[nrow(m.C), t + 1] <- Costs(m.M[nrow(m.C), t + 1])    # cost in the healthy state
m.E <- rbind(m.E, rep(0, ncol(m.E)))  # add the baby to the m.M matrix, previous utilities assigned to 0
m.E[nrow(m.E), t + 1] <- Effs(m.M[nrow(m.E), t + 1])     # utility in the healthy state
# add rownames
rownames(m.M)[nrow(m.M)] <- rownames(m.C)[nrow(m.C)] <- rownames(m.E)[nrow(m.E)] <-
paste("ind ", as.character(nrow(m.M)), ",", " baby", sep = "")
# increase the n.i
n.i <- n.i + 1
}
} # close time loop
# Display simulation progress
if(i/(n.i/10) == round(i/(n.i/10), 0)) { # display progress every 10%
cat('\r', paste(i/n.i * 100, "% done", sep = " "))
}
i <- i + 1
} # close individuals loop
comp.time = Sys.time() - p
comp.time
#### 05 Output ####
v.dw <- 1 / (1 + d.r) ^ (0:n.t) # calculate discount weight for each cycle based on discount rate d.r
tc <- m.C %*% v.dw    # total discounted cost per individual
te <- m.E %*% v.dw    # total discounted QALYs per individual
tc_avg <- mean(tc)     # average discounted cost
te_avg <- mean(te)     # average discounted QALYs
results <- data.frame("Total Cost" = tc_avg, "Total QALYs" = te_avg)
results
nrow(m.M)
rm(list =ls()) # clear memory (removes all the variables from the workspace)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the folder where the file is saved
#### 01 Load packages ####
library(plyr) # load plyr including the useful join function
#### 02 Load Functions ####
source("Functions.R")
#### 03 Input Model Parameters ####
set.seed(1)                    # set the seed
Probs <- function(M_it, df.X, v.Ts, t) {
# Arguments:
# M_it: health state occupied by individual i at cycle t (character variable)
# v.Ts: time an individual is sick
# t:     current cycle
# Returns:
#   transition probabilities for that cycle
m.p.it          <- matrix(0, nrow = n.s, ncol = n.i)  # create matrix of state transition probabilities
rownames(m.p.it) <-  v.n                              # give the state names to the rows
# lookup baseline probability and rate of dying based on individual characteristics
p.HD_all <- join(df.X, p.mort, by = c("Sex", "Age") )
p.HD     <- p.HD_all[M_it == "H","p.HD"]
# update the v.p with the appropriate probabilities
m.p.it[, M_it == "H"]  <- rbind(1 - p.HS1 - p.HD, p.HS1, 0, p.HD)      # transition probabilities when healthy
m.p.it[, M_it == "S1"] <- rbind(p.S1H, 1 - p.S1H - p.S1S2 - p.S1D[v.Ts], p.S1S2, p.S1D[v.Ts])  # transition probabilities when sick
m.p.it[, M_it == "S2"] <- c(0, 0, 1 - p.S2D, p.S2D)                                              # transition probabilities when sicker
m.p.it[, M_it == "D"]  <- c(0, 0, 0, 1)                                                          # transition probabilities when dead
return(t(m.p.it))
}
Costs <- function (M_it, Trt = FALSE) {
# M_it: health state occupied by individual i at cycle t (character variable)
# Trt:  is the individual being treated? (default is FALSE)
c.it <- 0                                  # by default the cost for everyone is zero
c.it[M_it == "H"]  <- c.H                  # update the cost if healthy
c.it[M_it == "S1"] <- c.S1 + c.Trt * Trt   # update the cost if sick conditional on treatment
c.it[M_it == "S2"] <- c.S2 + c.Trt * Trt   # update the cost if sicker conditional on treatment
c.it[M_it == "D"]  <- c.D                  # update the cost if dead
return(c.it)        		                   # return the costs
}
Effs <- function (M_it, df.X, Trt = FALSE, cl = 1) {
# M_it: health state occupied by individual i at cycle t (character variable)
# df.Pop: inidividual characteristics inclusing Age, Sex and the effect mofifier of the treatment effect
# Trt:  is the individual treated? (default is FALSE)
# cl:   cycle length (default is 1)
u.it <- 0                                                       # by default the utility for everyone is zero
u.it[M_it == "H"]  <- u.H                                       # update the utility if healthy
u.it[M_it == "S1" & Trt == FALSE] <- u.S1                       # update the utility if sick
u.it[M_it == "S1" & Trt == TRUE]  <- u.Trt * df.X$x[M_it == "S1"]   # update the utility if sick but on treatment (adjust for individual effect modifier)
u.it[M_it == "S2"] <- u.S2                       # update the utility if sicker
u.it[M_it == "D"]  <- u.D                        # update the utility if dead
QALYs <-  u.it * cl            # calculate the QALYs during cycle t
return(QALYs)                  # return the QALYs
}
samplev
## Annual probabilities of death
p.mort   <- read.csv("mortProb.csv")                     # load age dependent probability
dist.Age <- read.csv("MyPopulation-AgeDistribution.csv") # load age distribution
p.nort
p.mort
#### 04.1 Static characteristics ####
v.x      <- runif(n.i, min = 0.95, max = 1.05) # treatment effect modifier at baseline
rm(list =ls()) # clear memory (removes all the variables from the workspace)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the folder where the file is saved
#### 01 Load packages ####
library(plyr) # load plyr including the useful join function
#### 02 Load Functions ####
source("Functions.R")
#### 03 Input Model Parameters ####
set.seed(1)                    # set the seed
# Model structure
n.t   <- 30                    # time horizon, 30 cycles
n.i   <- 100000                  # number of simulated individuals
v.n   <- c("H","S1","S2","D")  # the model states names
n.s   <- length(v.n)           # the number of health states
d.r   <- 0.03                  # discount rate of 3% per cycle
v.dwe <- v.dwc <- 1 / ((1 + d.r) ^ (0:n.t))  # discount weight
# Event probabilities (per cycle)
## Annual transition probabilities
p.HS1   <- 0.15                # probability of becoming sick when healthy
p.S1H   <- 0.5                 # probability of recovering to healthy when sick
p.S1S2  <- 0.105               # probability of becoming sicker when sick
## Annual probabilities of death
p.mort   <- read.csv("mortProb.csv")                     # load age dependent probability
dist.Age <- read.csv("MyPopulation-AgeDistribution.csv") # load age distribution
p.S1D   <- c(0.0149, 0.018, 0.021, 0.026, 0.031, rep(0.037, n.t - 5))   # probability to die in S1  by cycle
p.S2D   <- 0.048            # probability to die in S2
# Cost inputs
c.H     <- 2000             # cost of one cycle in the healthy state
c.S1    <- 4000             # cost of one cycle in the sick state
c.S2    <- 15000            # cost of one cycle in the sicker state
c.D     <- 0                # cost of one cycle in the dead state
c.Trt   <- 12000            # cost of treatment (per cycle)
# Utility inputs
u.H     <- 1                # utility when healthy
u.S1    <- 0.75             # utility when sick
u.S2    <- 0.5              # utility when sicker
u.D     <- 0                # utility when dead
u.Trt   <- 0.95             # utility when sick(er) and being treated
#### 04 Sample individual level characteristics ####
#### 04.1 Static characteristics ####
v.x      <- runif(n.i, min = 0.95, max = 1.05) # treatment effect modifier at baseline
v.Age0   <- sample(x = dist.Age$age, prob = dist.Age$prop,      size = n.i, replace = TRUE) # sample from age distribution an initial age for every individual
v.Sex    <- sample(x = c("Female", "Male"), prob = c(0.5, 0.5), size = n.i, replace = TRUE) # randomly sample the sex of an individual (50% female)
df.X = data.frame(ID = 1:n.i, x = v.x, Age = v.Age0, Sex = v.Sex)
dist.Age
v,Age0
v.Age0
head(df.x)
head(df.X)
p.HD_all <- join(df.X, p.mort, by = c("Sex", "Age") )\
p.HD_all <- join(df.X, p.mort, by = c("Sex", "Age") )
head(p.HD_all)
head(df.X)
head(p.mort)
rm(list = ls())  # Delete everything that is in R's memory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))  #set working directory as the folder where the course material is stored
#### 03 Input Model Parameters ####
set.seed(1987)                            # set the seed
# Model structure
v.n <- c("healthy", "pregnant", "dead")       # vector with state names
n.s <- length(v.n)                        # number of states
c.l <- 1/12                                 # cycle length
max.age <- 80                             # maximum age
n.t <- 80 / c.l                           # number of cycles
n.t
80*12
n.i <- 10000                              # number of individuals
d.r <- 1.5                                # annual discount rate
v.M_Init <- rep("healthy", times = n.i)   # initial state for all individual at the start of the model
# load age distribution in the population
p.male <- 0.5
